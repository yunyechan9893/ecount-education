# Isolation Level

- Dirty Read는 커밋되지 않은 값을 읽어서 생김
  - 예를들어 DB에는 x = 10, y = 20 이라는 값이 존재한다.
  - (x + y) 트랜젝션1이 있고, (y = 70)이라는 트랜젝션2가 있다면
  - 트랜젝션1에서 x값인 10을 가져오고, 트랜젝션2에서 70이라는 값을 넣게 될 것이다.
  - 최종적으로 트랜젝션 1의 값은 80이 되고 커밋이 된다.
  - 트랜젝션2는 커밋이 되지 않은 상태에서 트랜젝션 1번이 커밋이 들어왔음으로 롤백이 돼
  - 트랜젝션1은 80, 트랜젝션2는 롤백으로 인해 DB에 x=10, y=20이 그대로 남게 된다.

  - ms는 dirty read 사용이 가능함 => update시 lock 테이블을 만들기 때문에 가능한 것으로 추측
  - pg는 dirty read 사용이 불가능함 => update시 lock 테이블을 만들지 않고 로우를 만들기에 가능하지 않은 것으로 추측
- Non-repeatable read
  - (x=10)DB, (x를 두번 조회)트랜젝션1, (x=40)트랜젝션2
  - 동시 실행 시 트랜젝션1이 x조회 10을 가져옴
  - 트랜젝션2가 40을 넣고 커밋함
  - 트랜젝션1이 x를 조회 40을 가져옴
  - 한 트랜젝션에서 동시에 두번을 가져왔는데 값이 다른 것을 말함
- Phantom read
  - 없던 데이터가 생김
  - (t1[x=10], t2[x=50])DB, (x가 10인 값을 두번 조회)트랜젝션1, (x=10)트랜젝션2
  - 첫번째 조회 시 t1만 가져오는데, 두번째 조회시 t1, t2 둘 다 가져오게 됨
- 위 현상들로 인해 모든 것을 막으면 DB에 성능이 급격히 저하 됨, 그렇기에 격리 수준을 정해서 이상한 현상을 아예 방지하는 것이 아닌
- 사용자가 선택하여 허용할 수 있게 범위를 지정해줌

-                  [Dirty Read , Non-repeatable read, Phantom read]
- Read uncommitted [ o, o o ] - 오류는 많지만 가장 성능이 좋음
- Read committed [ x, o o ]
- Repeatable read [ x, x o ]
- Serializable [ x, x x ] - 오류 자체가 발생하지 않음

- 위 내용을 선택하는 기준은 전체 처리량을 선택할 것인지, 오류 제어를 선택할 것인지

- Dirty Write
  - Read uncommitted에서 트랜젝션1과 트랜젝션2를 동시에 실행한다 가정하자
  - 트랜젝션1의 첫번째가 실행되고, 다음으로 트랜젝션2가 실행됐다.
  - 이후 트랜젝션1이 커밋이 아닌 abort로 롤백을 시도했다.
  - 그렇다면 트랜젝션1이 첫번째로 실행한 값을 롤백해야하는데, 트랜젝션2가 실행했던 값까지 rollback을 하게된다.
  - 또한 트랜젝션2가 중간에 커밋을 했다하더라도 커밋 내역까지 사라져 롤백되는 현상이 발생한다.
  - 이것을 Dirty Write라 한다.
- Lost update
  - (x값을 조회 후 업데이트)트랜젝션1, (x값을 조회 후 업데이트)트랜젝션2를 동시에 실행
  - 트랜젝션1이 값을 조회 후 트랜젝션2가 실행되면서 조회 업데이트 커밋까지 마쳤다.
  - 이때 트랜젝션1이 값을 업데이트하게되면 원본이라면 y의 값이 돼야하는데 z의 값이 돼버린다.

# Clustered Index & Nonclustered Index & unique index

- 인덱스란
  - 데이터베이스 검색 속도 향상을 위해 유지, 관리하는 자료구조
- Nonclustered Index
  - 트리 구조를 갖고 해당 데이터에 대한 포인터가 존재
  - 즉, 주소 값을 갖는 트리가 생성되고, 접근해서 원본 값을 찾아냄
  - 한 테이블에 여러 개의 인덱스를 생성 가능
  - 데이터의 정렬이 없음
- Clustered Index
  - 데이터를 정렬하여 인덱스를 생성
  - 속도가 엄청 빠름
  - 테이블 구조에 영향을 미침
  - 생성 계획
    - 1, 2, 3순서대로 확인하고 없다면 다음으로 넘어감
    - 1. Primary key는 항상 클러스터드 인덱스
    - 2. unique index로 정의된 컬럼 중 하나
    - 3. 보이지 않는 컬럼을 내부적으로 추가하여 사용
- Multy Column Index
  - 여러 컬럼을 인덱스로 만듦
  - Group By 처럼 정렬 됨

# Trigger

-

# lock

- row lock
  - 로우 단위로 lock을 걺
- table lock
  - 테이블 단위로 lock을 걺
- 안정성이 중요하면 트랜젝션을 묶어주는게 중요, 하지만 속도나 성능면에서 떨어짐
